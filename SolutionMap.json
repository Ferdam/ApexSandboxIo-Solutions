{
    "problem_99":   {"code":"public Integer maxProfit(List<Integer> prices){\n //code here\n}","timestamp":"1678758227285"},
    "problem_135":  {"code":"public void enrollStudents(List<String> emails, String className) {\n apxio__Student__c[] lstStudentsByEmail = [SELECT Id, Name, apxio__Email__c FROM apxio__Student__c WHERE apxio__Email__c IN :emails];\n apxio__Class__c[] studentClassQuery = [SELECT Id, Name FROM apxio__Class__c WHERE Name = :className LIMIT 1];\n if (studentClassQuery.size() == 0) return;\n apxio__Class__c studentClass = studentClassQuery[0];\n\n apxio__Class_Enrollment__c[] lstNewEnrollments = new apxio__Class_Enrollment__c[]{};\n for (apxio__Student__c tempStudent : lstStudentsByEmail) {\n lstNewEnrollments.add(\n new apxio__Class_Enrollment__c(\n apxio__Student__c = tempStudent.Id,\n apxio__Offered_Class__c = studentClass.Id\n )\n );\n }\n\n insert lstNewEnrollments;\n}","timestamp":"1678925808774"},
    "problem_20":   {"code":"public Boolean ascendingOrder(Integer a, Integer b, Integer c) {\n return a <= b && b <= c;\n}","timestamp":"1681778644899"},
    "problem_14":   {"code":"public Boolean sumEquals(Integer a, Integer b, Integer c) {\n return a + b == c;\n}","timestamp":"1681778600082"},
    "problem_56":   {"code":"public Boolean duplicateContacts(Contact c1, Contact c2) {\n return (c1.Email != null && c1.Email == c2.Email) || (c1.Phone != null && c1.Phone == c2.Phone);\n}","timestamp":"1678934586272"},
    "problem_64":   {"code":"public Boolean sameParent(Account acc, Contact con, Opportunity opp) {\n return acc?.Id != null && con.AccountId == opp.AccountId && con.AccountId == acc.Id; \n}","timestamp":"1678936716468"},
    "problem_68":   {"code":"public Integer secondLargest(List<Integer> numbers) {\n if (numbers == null) return null;\n numbers.sort();\n Set<Integer> setNumbers = new Set<Integer>(numbers);\n return new List<Integer>(setNumbers)[setNumbers.size()-2];\n}","timestamp":"1678942990798"},
    "problem_19":   {"code":"public Boolean isPassed(Boolean passedExam, Boolean passedAssignments, Boolean passedProject) {\n Integer totalCond = 0;\n if (passedExam) totalCond++;\n if (passedAssignments) totalCond++;\n if (passedProject) totalCond++;\n return totalCond >= 2;\n}","timestamp":"1681778684212"},
    "problem_73":   {"code":"public boolean isSorted(List<Integer> numbers) {\n if (numbers == null) return false;\n if (numbers.size() <= 2) return true;\n\n Boolean isDescending = numbers[0] >= numbers[1] && numbers[1] >= numbers[2];\n Boolean isAscending = !isDescending;\n for (Integer i=0; i < numbers.size()-1; i++) {\n if (isDescending && numbers[i] < numbers[i+1]) return false;\n if (isAscending && numbers[i] > numbers[i+1]) return false;\n }\n\n return true;\n}","timestamp":"1678942443614"},
    "problem_93":   {"code":"public String convert15to18DigitId(String fifteenDigit)\n{\n if (fifteenDigit == null) return null;\n try {\n Id x18Digit = fifteenDigit;\n return x18Digit;\n }\n catch (Exception ex) {}\n return '-1';\n}","timestamp":"1678926905121"},
    "problem_96":   {"code":"public List<Account> getAccountsFromJSONString(String inputJSON){\n if (inputJSON == null) return null;\n return (List<Account>) JSON.deserializeStrict(inputJSON, Account[].class);\n}","timestamp":"1678928710942"},
    "problem_61":   {"code":"public void escalateIfMeetsCriteria(Case c) {\n if (c.IsEscalated) return;\n Boolean needsEscalation = false;\n needsEscalation = (c.Type == 'Mechanical' || c.Type == 'Electrical')\n && c.Reason == 'Breakdown'\n && c.Status == 'In Progress';\n c.IsEscalated = needsEscalation;\n}","timestamp":"1678936510800"},
    "problem_76":   {"code":"public Set<Integer> setUnion(Set<Integer> set1, Set<Integer> set2) {\n //code here\n}","timestamp":"1679080264852"},
    "problem_60":   {"code":"public Boolean isKeyAccount(Account a) {\n Map<String, Decimal> mapIndustryThresholds = new Map<String, Decimal>{\n 'Banking' => 600000,\n 'Technology' => 800000,\n 'Retail' => 2000000\n };\n Decimal selectedIndustryThreshold = mapIndustryThresholds.get(a.Industry);\n if (selectedIndustryThreshold == null) return a.AnnualRevenue >= 500000;\n return a.AnnualRevenue >= selectedIndustryThreshold;\n}","timestamp":"1678935814102"},
    "problem_57":   {"code":"public void setAccountRating(Account a) {\n if (a.AnnualRevenue <= 100000) { a.Rating = 'Cold'; return; }\n if (a.AnnualRevenue <= 500000) { a.Rating = 'Warm'; return; }\n a.Rating = 'Hot';\n}","timestamp":"1678934799257"},
    "problem_134":  {"code":"public Id classFromCourse(String courseName) {\n apxio__Course__c[] parentCourseQuery = [SELECT Id, Name FROM apxio__Course__c WHERE Name = :courseName LIMIT 1];\n if (parentCourseQuery.size() == 0) { return null; }\n apxio__Course__c parentCourse = parentCourseQuery[0];\n apxio__Class__c newClass = new apxio__Class__c(\n Name = parentCourse.Name,\n apxio__Course__c = parentCourse.Id\n );\n\n insert newClass;\n return newClass.Id;\n}","timestamp":"1678923999132"},
    "problem_6":    {"code":"public Boolean isLeapYear(Integer year) {\n Boolean isDivisibleBy4 = Math.mod(year, 4) == 0;\n Boolean isDivisibleBy100 = Math.mod(year, 100) == 0;\n Boolean isDivisibleBy400 = Math.mod(year, 400) == 0;\n\n return (isDivisibleBy400 && isDivisibleBy100) || (isDivisibleBy4 && !isDivisibleBy100);\n}\n","timestamp":"1681778776707"},
    "problem_2":    {"code":"public static Integer findLargest(List<Integer> nums) {\n\tif (nums?.size() == 0) return null;\n Integer largest = nums[0];\n for (Integer i=0; i < nums.size(); i++) {\n if (largest < nums[i]) {\n largest = nums[i];\n }\n }\n\n return largest;\n}","timestamp":"1678939551600"},
    "problem_111":  {"code":"public void insertAtStart(String cityName, List<String> cities) {\n if (cities == null) return;\n if (cities?.size() > 0) { cities.add(0, cityName); return; }\n cities.add(cityName);\n}","timestamp":"1678940419220"},
    "problem_71":   {"code":"public List<Integer> positiveIntegers(List<Integer> numbers) {\n List<Integer> justPositiveNumbers = new List<Integer>();\n for (Integer num : numbers) {\n if (num > 0) justPositiveNumbers.add(num);\n }\n return justPositiveNumbers;\n}","timestamp":"1678939637292"},
    "problem_11":   {"code":"public String nameFromEmail(String email) {\n String[] names = email.toLowerCase().replaceAll('@.*', '').split('\\\\.');\n return names[0].capitalize() + ' ' + names[1].capitalize();\n}","timestamp":"1681780903820"},
    "problem_69":   {"code":"public List<Integer> fibonacciSeries(Integer n) {\n Map<Integer, Integer> mapCache = new Map<Integer, Integer>{ 0 => 0, 1 => 1, 2 => 1};\n Integer[] fiboSeries = new Integer[]{};\n if (n == 1) return new Integer[]{1};\n for (Integer i=1; i <= n; i++) {\n Integer cache = mapCache.get(i);\n Integer previous = mapCache.get(i-1);\n Integer preprevious = mapCache.get(i-2);\n if (cache == null) { \n cache = preprevious + previous; \n mapCache.put(i, cache);\n }\n fiboSeries.add(cache);\n }\n return fiboSeries;\n}","timestamp":"1678941527054"},
    "problem_97":   {"code":"public String divide(Integer a, Integer b){\n Integer result;\n try {\n result = a/b;\n }\n catch (Exception ex) {\n return ex.getMessage();\n }\n return ''+result;\n}","timestamp":"1678927463472"},
    "problem_106":  {"code":"public Map<String,String> getContextUserInformation(){\n \n User currentUser = [SELECT Id, UserName, ProfileId, Email, UserType FROM User WHERE Id = :UserInfo.getUserId()];\n return new Map<String, String> {\n 'UserName' => currentUser.UserName,\n 'ProfileId' => currentUser.ProfileId,\n 'EmailId' => currentUser.Email,\n 'Type' => currentUser.UserType\n };\n\n // OR\n\n // return new Map<String, String> {\n // 'UserName' => UserInfo.getUserName(),\n // 'ProfileId' => UserInfo.getProfileId(),\n // 'EmailId' => UserInfo.getUserEmail(),\n // 'Type' => UserInfo.getUserType()\n // };\n\n}","timestamp":"1678929310428"},
    "problem_59":   {"code":"public Boolean isBirthday(Contact c) {\n return c.Birthdate.month() == Date.today().month() \n && c.Birthdate.day() == Date.today().day();\n}","timestamp":"1678935369678"},
    "problem_129":  {"code":"public List<apxio__Student__c> selectStudentsWithoutContactInfo() {\n apxio__Student__c[] lstStuds = [SELECT Id, Name \n FROM apxio__Student__c \n WHERE apxio__Active__c = true \n AND (apxio__Email__c = null\n OR apxio__Phone__c = null)\n ORDER BY Name ASC];\n\n return lstStuds;\n}","timestamp":"1678921794874"},
    "problem_98":   {"code":"public List<Account> getAccounts(List<Account> accounts) {\n if (accounts == null) return null;\n for (Integer i=0; i < accounts.size(); i++) {\n for (Integer j=0; j < accounts.size(); j++) {\n if (j == i || accounts[j].AnnualRevenue == accounts[i].AnnualRevenue) continue;\n if (accounts[j].AnnualRevenue < accounts[i].AnnualRevenue) {\n Account aux = accounts[i];\n accounts[i] = accounts[j];\n accounts[j] = aux;\n }\n }\n }\n return accounts;\n}\n// write extra class here \n","timestamp":"1678934178862"},
    "problem_103":  {"code":"public List<String> getFieldsValue(Account acc, List<String> fields)\n{\n String[] listValues = new String[]{};\n for (String tempField : fields) {\n String fieldValue = '' + acc.get(tempField);\n if (acc.get(tempField) == null) fieldValue = null;\n listValues.add(fieldValue);\n // listValues.add(acc.get(tempField) == null ? null : '' + acc.get(tempField));\n }\n return listValues;\n}","timestamp":"1678928128957"},
    "problem_130":  {"code":"public List<apxio__Student__c> selectUnreachableStudents() {\n apxio__Student__c[] lstStuds = [SELECT Id, Name \n FROM apxio__Student__c \n WHERE apxio__Active__c = true \n AND apxio__Email__c = null\n AND apxio__Phone__c = null\n ORDER BY Name ASC];\n\n return lstStuds;\n}","timestamp":"1678921732614"},
    "problem_55":   {"code":"public Boolean companionPlants(List<String> plants) {\n if (plants.size() == 1) return false;\n Map<String, String[]> mapIsCompanion = new Map<String, String[]> {\n 'lettuce' => new String[] { 'cucumbers', 'onions' },\n 'cucumbers' => new String[] { 'lettuce' },\n 'onions' => new String[] { 'carrots', 'lettuce', 'tomatoes' },\n 'carrots' => new String[] { 'onions' },\n 'tomatoes' => new String[] { 'onions' }\n };\n for (Integer i=0; i < plants.size()-1; i++) {\n List<String> companions = mapIsCompanion.get(plants.get(i));\n if (companions == null) return false;\n if (!companions.contains(plants.get(i+1))) return false;\n }\n\n return true;\n}","timestamp":"1678941220337"},
    "problem_67":   {"code":"public void linkParent(Case c1, Case c2) {\n if (c1.ContactId == null || c1.ContactId != c2.ContactId) return;\n if (c1.CreatedDate > c2.CreatedDate) c1.ParentId = c2.Id;\n if (c1.CreatedDate < c2.CreatedDate) c2.ParentId = c1.Id;\n}","timestamp":"1678937979075"},
    "problem_100":  {"code":"public Boolean isTypeAccount(sObject record)\n{\n if (record instanceof Account) return true;\n return false;\n}","timestamp":"1678925967487"},
    "problem_9":    {"code":"public String formatName(String firstName, String lastName) {\n return firstName + ' ' + lastName;\n}","timestamp":"1681780890070"},
    "problem_7":    {"code":"public Boolean isPrime(Integer num) {\n Integer divisibleCount = 1;\n for (Integer i=1; i <= (Integer)(num/2); i++) {\n if (Math.mod(num, i) == 0) { divisibleCount++; }\n }\n return divisibleCount <= 2;\n}","timestamp":"1681780836238"},
    "problem_54":   {"code":"public Boolean companionPlants(String plant1, String plant2) {\n Map<String, String[]> mapIsCompanion = new Map<String, String[]> {\n 'lettuce' => new String[] { 'cucumbers', 'onions' },\n 'cucumbers' => new String[] { 'lettuce' },\n 'onions' => new String[] { 'carrots', 'lettuce', 'tomatoes' },\n 'carrots' => new String[] { 'onions' },\n 'tomatoes' => new String[] { 'onions' }\n };\n\n return mapIsCompanion.get(plant1).contains(plant2);\n\n}","timestamp":"1681778765945"},
    "problem_132":  {"code":"public Id insertCourse(String name, String details, Integer credits) {\n apxio__Course__c newCourse = new apxio__Course__c(\n apxio__Course_Details__c = details,\n apxio__Credits__c = '' + credits,\n Name = name\n );\n\n Database.SaveResult insertResult = Database.insert(newCourse, false);\n if (!insertResult.isSuccess()) return null;\n\n return newCourse.Id;\n}","timestamp":"1678921237679"},
    "problem_4":    {"code":"public Integer diff(Integer a, Integer b) {\n return Math.abs(a - b);\n}","timestamp":"1681778585010"},
    "problem_16":   {"code":"public Integer sumToN(Integer n) {\n Integer total = 0;\n for (Integer i=0; i <= n; i++) {\n total += i;\n }\n return total;\n}","timestamp":"1681780853286"},
    "problem_95":   {"code":"public String getAccountsInJSONFormat(List<Account> accounts){\n return JSON.serialize(accounts);\n}\n","timestamp":"1678928189328"},
    "problem_105":  {"code":"public void validateInsert(List<Opportunity> opportunities){\n for (Opportunity tempOpp : opportunities) {\n if (tempOpp.StageName == 'Closed Won' && String.isBlank(tempOpp.Description)) {\n tempOpp.addError('Description should not be empty for Closed Won opportunity.');\n }\n }\n}","timestamp":"1678929416719"},
    "problem_126":  {"code":"public Id insertStudent(String name, String email) {\n apxio__Student__c newRec = new apxio__Student__c(apxio__Email__c = email, Name = name);\n insert newRec;\n return newRec.Id;\n}","timestamp":"1678920894012"},
    "problem_13":   {"code":"public Integer fibonacci(Integer n) {\n Map<Integer, Integer> mapCache = new Map<Integer, Integer>{ 0 => 0, 1 => 1, 2 => 1};\n if (n == 1) return 1;\n for (Integer i=2; i <= n; i++) {\n Integer cache = mapCache.get(i);\n Integer previous = mapCache.get(i-1);\n Integer preprevious = mapCache.get(i-2);\n if (cache == null) { \n cache = preprevious + previous; \n mapCache.put(i, cache);\n continue;\n }\n }\n return mapCache.get(n);\n}","timestamp":"1678941279599"},
    "problem_113":  {"code":"public String reverseWordsInASentence(String sentence){\n\tif (sentence == null) return null;\n String[] splitSentence = sentence.split(' ');\n String[] reversedSentence = new String[]{};\n for (Integer i=splitSentence.size()-1; i >= 0; i--) {\n reversedSentence.add(splitSentence[i]);\n }\n return String.join(reversedSentence, ' ');\n}","timestamp":"1678855767667"},
    "problem_74":   {"code":"public List<String> orgNames(List<String> adjectives, List<String> animals) {\n Set<String> setOrgNames = new Set<String>();\n\n for (String currentAdjective : adjectives) {\n for (String currentAnimal : animals) {\n String newOrgName = currentAdjective + '-' + currentAnimal;\n setOrgNames.add(newOrgName);\n }\n }\n\n return new List<String>(setOrgNames);\n}","timestamp":"1678941857412"},
    "problem_15":   {"code":"public String whichTwo(Integer a, Integer b, Integer c) {\n Integer[] lstNum = new Integer[]{ a, b, c };\n Map<Integer, String> mapNum = new Map<Integer, String> {\n 0 => 'a',\n 1 => 'b',\n 2 => 'c'\n };\n for (Integer i=0; i < lstNum.size(); i++) {\n for (Integer j=0; j < lstNum.size(); j++) {\n if (j == i) continue;\n Integer sum = lstNum[i] + lstNum[j];\n System.debug(lstNum[i] + ' + ' + lstNum[j] + ' = ' + sum);\n if (lstNum.indexOf(sum) >= 0 && lstNum.indexOf(sum) != j && lstNum.indexOf(sum) != i) \n return mapNum.get(lstNum.indexOf(sum));\n }\n }\n return '';\n}","timestamp":"1681778712866"},
    "problem_21":   {"code":"public String aOrAn(String word) {\n return word.left(1).replaceAll('a|e|i|o|u', '#').startsWith('#') ? 'an ' + word : 'a ' + word;\n}","timestamp":"1681778657623"},
    "problem_128":  {"code":"public List<apxio__Student__c> selectActiveStudents() {\n return [SELECT Id, Name, apxio__Active__c FROM apxio__Student__c WHERE apxio__Active__c = true];\n}","timestamp":"1678921736159"},
    "problem_101":  {"code":"public List<sObject> getListOfsObject(List<Account> accounts, List<Contact> contacts)\n{\n List<SObject> lstSObjects = new List<SObject>();\n if (accounts != null) {\n lstSObjects.addAll((List<SObject>) accounts);\n }\n if (contacts != null) {\n lstSObjects.addAll((List<SObject>) contacts);\n }\n\n return lstSObjects;\n}","timestamp":"1678928526104"},
    "problem_102":  {"code":"public List<Account> checkAccounts(List<Account> accounts)\n{\n if (accounts == null) {\n throw new IllegalArgumentException('accounts should not be null');\n }\n for (Account tempAcc : accounts) {\n if (tempAcc.BillingCity == null) {\n throw new AccountException('Invalid BillingCity');\n }\n }\n return accounts;\n}\n\n//do not remove the following custom-defined exception\npublic class AccountException extends Exception {}","timestamp":"1678927669342"},
    "problem_12":   {"code":"public Integer rockPaperScissors(String player1, String player2) {\n Map<String, String> mapFigureWins = new Map<String, String> {\n 'rock' => 'scissors',\n 'paper' => 'rock',\n 'scissors' => 'paper'\n };\n \n if (mapFigureWins.get(player1) == player2) return 1;\n if (mapFigureWins.get(player2) == player1) return 2;\n return 0;\n}","timestamp":"1681778736059"},
    "problem_127":  {"code":"public String registerStudent(String name, String phone, String email) {\n apxio__Student__c newStudent = new apxio__Student__c(\n Name = name,\n apxio__Phone__c = phone,\n apxio__Email__c = email\n );\n\n insert newStudent;\n\n return [SELECT Id, apxio__Registration_Number__c FROM apxio__Student__c WHERE Id = :newStudent.Id LIMIT 1].apxio__Registration_Number__c;\n}","timestamp":"1678921399424"},
    "problem_5":    {"code":"public String evenOrOdd(Integer num) {\n return Math.mod(num, 2) == 0 ? 'even' : 'odd';\n}","timestamp":"1681778725545"},
    "problem_18":   {"code":"public Boolean isTeenager(Integer age) {\n return age >= 13 && age <= 19;\n}","timestamp":"1681780559513"},
    "problem_10":   {"code":"public String formatName(String firstName, String lastName) {\n if (String.isBlank(firstName) && String.isBlank(lastName)) return '';\n if (String.isBlank(firstName)) return lastName;\n if (String.isBlank(lastName)) return firstName;\n return lastName + ', ' + firstName;\n}","timestamp":"1681780892269"},
    "problem_3":    {"code":"public static Integer findLargest(Integer num1, Integer num2, Integer num3) {\n\tInteger[] numList = new Integer[] {num1, num2, num3};\n Integer largest = numList[0];\n for (Integer num : numList) {\n if (num > largest) largest = num;\n }\n return largest;\n}","timestamp":"1681778673117"},
    "problem_72":   {"code":"public List<String> fullNames(List<String> firstNames, List<String> lastNames) {\n List<String> lstFullNames = new List<String>();\n\n for (Integer i=0; i<firstNames.size(); i++) {\n lstFullNames.add(firstNames[i] + ' ' + lastNames[i]);\n }\n\n return lstFullNames;\n}","timestamp":"1678940564071"},
    "problem_17":   {"code":"public String ageGroup(Integer n) {\n if (n <= 1) { return 'Infant'; }\n if (n <= 14) { return 'Child'; }\n if (n <= 21) { return 'Youth'; }\n return 'Adult';\n}","timestamp":"1681778750424"},
    "problem_133":  {"code":"public void insertStudents(List<String> studentNames, List<String> studentEmails) {\n apxio__Student__c[] lstNewStudents = new apxio__Student__c[]{};\n for (Integer i = 0; i < studentNames.size(); i++) {\n lstNewStudents.add(\n new apxio__Student__c (\n Name = studentNames[i],\n apxio__Email__c = studentEmails[i]\n )\n );\n }\n\n insert lstNewStudents;\n}","timestamp":"1678923617637"},
    "problem_94":   {"code":"public String getAccountBillingCityWithSafeNavigation(List<Account> accounts){\n return accounts?.get(0)?.BillingCity?.toUpperCase();\n}\n","timestamp":"1678927806577"},
    "problem_63":   {"code":"public Boolean sameParent(Contact c, Opportunity opp) {\n return c.AccountId != null && c.AccountId == opp.AccountId;\n}","timestamp":"1678936627647"},
    "problem_90":   {"code":"public Boolean isEndWithZero(Integer num){\n return Math.mod(num, 10) == 0;\n}","timestamp":"1681778704189"},
    "problem_119":  {"code":"public Integer maxConsecutiveOnes(Integer[] numbers) {\n Integer maxConsec = 0;\n Integer selectedType = 1;\n for (Integer i=0; i < numbers.size(); i++) {\n // Integer typeToCount = numbers[i];\n Integer typeToCount = selectedType;\n Integer currentMaxConsec = 0;\n for (Integer j=i; j < numbers.size(); j++) {\n if (numbers[j] == typeToCount) { currentMaxConsec++; continue; }\n i = j;\n break;\n }\n if (maxConsec < currentMaxConsec) maxConsec = currentMaxConsec;\n }\n return maxConsec;\n}","timestamp":"1678940209679"},
    "problem_1":    {"code":"public static Integer arraySum(List<Integer> numbers) {\n Integer total = 0;\n for (Integer item : numbers) total += item;\n return total;\n}","timestamp":"1678938055272"},
    "problem_66":   {"code":"public void setParent(Account acc, Contact con, Opportunity opp) {\n if (acc?.Id == null) return;\n con.AccountId = acc.Id;\n opp.AccountId = acc.Id;\n}","timestamp":"1678937367767"},
    "problem_8":    {"code":"public Integer nextPrime(Integer num) {\n while (true) {\n Integer count = 0;\n num++;\n for (Integer i=1; i <= num/2; i++) {\n if (Math.mod(num, i) == 0) count++;\n if (count > 2) break;\n }\n if (count == 1) return num;\n }\n return num;\n}","timestamp":"1678855231267"},
    "problem_92":   {"code":"public List<String> getNamesInAscOrder(List<String> accountNames)\n{\n accountNames?.sort();\n return accountNames;\n}\n","timestamp":"1680044460264"},
    "problem_79":   {"code":"public String changeTimeFormat(String strTime) {\n String[] hourMinutes = strTime.split(':');\n Integer hour = Integer.valueOf(hourMinutes[0]);\n String minutes = hourMinutes[1];\n Boolean isPM = hour >= 12;\n hour = hour > 12 ? Math.abs(hour - 12) : hour;\n hour = hour == 0 ? 12 : hour;\n return ('' + hour).leftPad(2, '0') + ':' + minutes + ( isPM ? ' PM' : ' AM' );\n}","timestamp":"1681780919368"},
    "problem_131":  {"code":"public void createCourseAndClass(String name, String description) {\n apxio__Course__c newCourse = new apxio__Course__c (\n Name = name,\n apxio__Course_Details__c = description\n );\n\n insert newCourse;\n\n String description255 = description == null ? '' : description;\n if (description255.length() >= 255) description255 = description255.substring(0,255);\n apxio__Class__c newClass = new apxio__Class__c (\n Name = name,\n apxio__Course__c = newCourse.Id,\n apxio__Description__c = description255\n );\n\n insert newClass;\n\n \n}","timestamp":"1678923344363"},
    "problem_70":   {"code":"public List<Integer> evenNumbers(Integer n) {\n List<Integer> lstInt = new List<Integer>();\n for (Integer i=1; i <= n; i++) { lstInt.add(i*2); }\n return lstInt;\n}","timestamp":"1678939201067"}
}